{"version":3,"sources":["components/pages/Dashboard.tsx","components/patterns/atoms/TextInput.tsx","components/patterns/molecules/forms/loginForm.tsx","components/pages/Login.tsx","context/auth.ts","components/privateRoute.tsx","components/pages/PageNotFound.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DashboardPage","TextInput","type","register","className","name","addClass","placeholder","required","finalClass","ref","LoginForm","useForm","errors","handleSubmit","onSubmit","data","axios","post","then","res","console","log","email","LoginPage","AuthContext","createContext","PrivateRoute","props","Component","component","rest","authDetails","useContext","render","to","PageNotFound","App","Provider","value","path","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0MAUeA,MARf,WACE,OACE,oCACE,2C,QCuBSC,EAPyB,SAAC,GAAmF,IAAD,IAAhFC,YAAgF,MAAzE,OAAyE,EAAjEC,EAAiE,EAAjEA,SAAUC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACpGC,EAAaL,GAAwB,8DAC3C,OACE,2BAAOF,KAAMA,EAAMQ,IAAKP,EAAS,CAAEK,aAAaH,KAAMA,EAAMD,UAAS,UAAKK,EAAL,YAAmBH,GAAYC,YAAaA,K,iBCetGI,MA7Bf,WAAuB,IAAD,EACuBC,cAAnCT,EADY,EACZA,SAAUU,EADE,EACFA,OAAQC,EADN,EACMA,aAS1B,OACE,0BAAMC,SAAUD,GARD,SAACE,GAChBC,IAAMC,KAAK,kBAAmBF,GAC3BG,MAAK,SAACC,GACLC,QAAQC,IAAIF,SAMdhB,UAAU,kBACV,yBAAKA,UAAU,QACb,+BACE,kBAAC,EAAD,CAAWG,YAAY,QAAQF,KAAK,QAAQF,SAAUA,EAAUK,UAAQ,IACvEK,EAAOU,OAAS,sBAGrB,yBAAKnB,UAAU,QACb,+BACE,kBAAC,EAAD,CAAWG,YAAY,WAAWF,KAAK,WAAWF,SAAUA,EAAUK,UAAQ,MAGlF,4BAAQN,KAAK,SAASE,UAAU,yDAAhC,YChBSoB,MAff,WACE,OACE,oCACA,yBAAKpB,UAAU,sBACb,yBAAKA,UAAU,mEACb,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,mDAAd,QACA,kBAAC,EAAD,W,sBCRGqB,EAAcC,wBAAc,MCqB1BC,MAdf,SAAsBC,GAA2B,IAC5BC,EAAuBD,EAAlCE,UAAyBC,EADa,YACJH,EADI,eAExCI,EDNCC,qBAAWR,GCQlB,OACE,kBAAC,IAAD,iBAAWM,EAAX,CAAiBG,OAAQ,SAACN,GAAD,OACvBI,EACE,kBAACH,EAAcD,GACf,kBAAC,IAAD,CAAUO,GAAG,sBCPNC,MARf,WACE,OACE,oCACA,qDCyBWC,MAtBf,WACE,OACE,oCACE,kBAACZ,EAAYa,SAAb,CAAsBC,MAAO,MAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eAAeV,UAAWN,IAEtC,kBAAC,EAAD,CAAciB,OAAK,EAACD,KAAK,IAAIV,UAAW9B,IACxC,kBAAC,EAAD,CAAcwC,KAAK,SAASV,UAAW9B,IACvC,kBAAC,EAAD,CAAcwC,KAAK,aAAaV,UAAW9B,IAE3C,kBAAC,IAAD,CAAOwC,KAAK,KACV,kBAAC,EAAD,YCTME,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.d9ad987b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DashboardPage () {\n  return (\n    <>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n\nexport default DashboardPage;","import React from 'react'\n\ntype RefReturn =\n  | string\n  | ((instance: HTMLInputElement | null) => void)\n  | React.RefObject<HTMLInputElement>\n  | null\n  | undefined;\n\ntype InputProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n> & {\n  type?: string\n  className?: string\n  addClass?: string\n  placeholder?: string\n  name: string\n  register: ({ required }: { required?: boolean }) => RefReturn;\n}\n\nconst TextInput: React.FC<InputProps> = ({ type = 'text', register, className, name, addClass, placeholder, required }) => {\n  const finalClass = className ? className : 'w-full p-2 border border-gray-600 border-solid outline-none'\n  return (\n    <input type={type} ref={register({ required })} name={name} className={`${finalClass} ${addClass}`} placeholder={placeholder}/>\n  );\n}\n\nexport default TextInput;","import React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport TextInput from '@patterns/atoms/TextInput';\nimport axios from 'axios'\n\ninterface IFormValues {\n  email: string;\n  password: number;\n}\n\nfunction LoginForm () {\n  const { register, errors, handleSubmit } = useForm<IFormValues>();\n  \n  const onSubmit = (data: IFormValues) => {\n    axios.post('/api/auth/login', data)\n      .then((res) => {\n        console.log(res)\n      })\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}\n      className=\"px-8 pt-6 pb-8\">\n      <div className=\"mb-4\">\n        <label>\n          <TextInput placeholder=\"Email\" name=\"email\" register={register} required />\n          {errors.email && \"Email is required\"}\n        </label>\n      </div>\n      <div className=\"mb-4\">\n        <label>\n          <TextInput placeholder=\"Password\" name=\"password\" register={register} required />\n        </label>\n      </div>\n      <button type=\"submit\" className=\"bg-primary px-4 py-2 text-white w-full cursor-pointer\">Submit</button>\n    </form>\n  );\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport LoginForm from '@patterns/molecules/forms/loginForm'\n\nfunction LoginPage () {\n  return (\n    <>\n    <div className=\"bg-gray-300 w-full\">\n      <div className=\"flex-col flex justify-center h-screen md:w-1/3 lg:w-1/4 mx-auto\">\n        <div className=\"bg-white mb-16 pt-4\">\n          <h1 className=\"text-center text-3xl font-heading font-semibold\">RxCP</h1>\n          <LoginForm />\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default LoginPage;","import { createContext, useContext } from 'react';\n\nexport const AuthContext = createContext(null);\n\nexport function useAuthContext() {\n  return useContext(AuthContext);\n} ","import React from 'react';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\n\nimport { useAuthContext } from '@/context/auth'\n\ninterface PrivateRouteProps extends RouteProps {\n  component: any;\n}\n\nfunction PrivateRoute(props: PrivateRouteProps) {\n  const { component: Component, ...rest } = props;\n  const authDetails = useAuthContext();\n  \n  return(\n    <Route {...rest} render={(props) => (\n      authDetails ? \n        <Component {...props} />\n      : <Redirect to=\"/admin/login\" />\n    )}\n    />\n  );\n}\n\nexport default PrivateRoute;","import React from 'react';\n\nfunction PageNotFound () {\n  return (\n    <>\n    <h1>404 Page Not Found.</h1>\n    </>\n  )\n}\n\nexport default PageNotFound;","import DashboardPage from '@pages/Dashboard';\nimport LoginPage from '@pages/Login';\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport PrivateRoute from './components/privateRoute';\nimport { AuthContext } from './context/auth';\nimport PageNotFound from './components/pages/PageNotFound';\n\nfunction App() {\n  return (\n    <>\n      <AuthContext.Provider value={null}>\n        <Router>\n          <Switch>\n            <Route path=\"/admin/login\" component={LoginPage} />\n\n            <PrivateRoute exact path=\"/\" component={DashboardPage} />\n            <PrivateRoute path=\"/admin\" component={DashboardPage} />\n            <PrivateRoute path=\"/dashboard\" component={DashboardPage} />\n\n            <Route path=\"*\">\n              <PageNotFound />\n            </Route>\n          </Switch>\n        </Router>\n      </AuthContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}